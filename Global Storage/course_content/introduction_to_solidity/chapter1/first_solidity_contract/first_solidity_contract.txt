```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solidity Tutorial Summary</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-8">

    <h1 class="text-3xl font-bold mb-4">Solidity Tutorial Summary</h1>

    <h2 class="text-2xl font-semibold mb-2">#1 · Intro To Solidity</h2>

    <p class="mb-4">Solidity is a contract-oriented, high-level language for implementing smart contracts. It is statically typed, supports inheritance, libraries and complex user-defined types among other features.  This section introduces the basics of Solidity by demonstrating how to store and retrieve a value within a smart contract.</p>

    <p class="mb-4"><strong>Storing a Value:</strong></p>

    <pre class="bg-gray-200 p-4 rounded-lg overflow-x-auto">
        <code class="language-solidity text-sm">
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 storedData;

    function set(uint256 x) public {
        storedData = x;
    }

    function get() public view returns (uint256) {
        return storedData;
    }
}
        </code>
    </pre>

    <p class="mb-4">This code defines a contract named <code>SimpleStorage</code>. Inside the contract, <code>storedData</code> is a state variable of type <code>uint256</code> (unsigned 256-bit integer) used to store a value. The <code>set</code> function allows anyone to modify the <code>storedData</code> variable.  The <code>get</code> function allows anyone to retrieve the stored value.</p>


    <h2 class="text-2xl font-semibold mb-2">#2 · Data Types and Data Structures</h2>

    <p class="mb-4">Solidity offers several data types and structures to organize and manage data within smart contracts.</p>

    <ul class="list-disc ml-6 mb-4">
        <li><strong>Enums:</strong> Enumerations restrict a variable to have one of only a few predefined values.  They enhance code readability and prevent accidental assignments of invalid values.</li>
        <li><strong>Structs:</strong> Structures allow you to group several variables of different types into a single unit.  This helps organize complex data within your contracts.</li>
        <li><strong>Arrays:</strong> Arrays store an ordered sequence of elements of the same type.  Solidity supports both fixed-size and dynamic-size arrays.</li>
        <li><strong>Mappings:</strong> Mappings are key-value stores similar to dictionaries or hash tables.  They provide efficient lookup of values based on their associated keys.</li>
    </ul>

    <pre class="bg-gray-200 p-4 rounded-lg overflow-x-auto">
        <code class="language-solidity text-sm">
pragma solidity ^0.8.0;

contract DataStructures {
    enum Status { Pending, Shipped, Delivered }
    Status public currentStatus;

    struct Product {
        string name;
        uint price;
    }
    Product public product;

    uint[] public numbers;
    mapping(address => uint) public balances;

    function examples() public {
        currentStatus = Status.Pending;
        product = Product("Example", 100);
        numbers.push(1);
        balances[msg.sender] = 50;
    }
}
        </code>
    </pre>


    <h2 class="text-2xl font-semibold mb-2">#3 · Function Visibility, Modifiers & Time</h2>

    <p class="mb-4">This section dives into controlling access to functions (visibility), reusable code blocks (modifiers), and how to work with time in Solidity.</p>

    <p class="mb-4"><strong>Modifiers:</strong></p>

    <ul class="list-disc ml-6 mb-4">
        <li><strong>`onlyOwner` Modifier:</strong> Restricts a function's execution to only the contract's owner. This uses `msg.sender` to identify the caller and `require()` to enforce the restriction.</li>
        <li><strong>Time-Based Modifiers:</strong> Modifiers can also incorporate time checks using `block.timestamp` to control when a function can be executed (e.g., only after a certain time).</li>
    </ul>


    <pre class="bg-gray-200 p-4 rounded-lg overflow-x-auto">
        <code class="language-solidity text-sm">
pragma solidity ^0.8.0;

contract Modifiers {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _; // Placeholder for the function code
    }

    modifier afterStartTime(uint startTime) {
        require(block.timestamp >= startTime, "Function can only be called after the start time.");
        _;
    }

    function changeOwner(address newOwner) public onlyOwner {
        owner = newOwner;
    }

    function timedFunction(uint startTime) public afterStartTime(startTime) {
        // Function logic here
    }
}
        </code>
    </pre>


    <h2 class="text-2xl font-semibold mb-2">#4 · Sending Ether & Events</h2>

    <p class="mb-4">This section covers how to transfer Ether within a contract and emit events to log contract activity.</p>

    <ul class="list-disc ml-6 mb-4">
        <li><strong>Sending Ether:</strong> Ether can be sent directly to an address using <code>address.transfer()</code>. The amount of Ether sent with a function call can be accessed via <code>msg.value</code>.</li>
        <li><strong>Payable Modifier:</strong>  The <code>payable</code> modifier is crucial for functions that receive Ether.</li>
        <li><strong>Events:</strong> Events allow logging of contract activities that can be monitored off-chain by DApps or other services.</li>
    </ul>

    <pre class="bg-gray-200 p-4 rounded-lg overflow-x-auto">
<code class="language-solidity text-sm">
pragma solidity ^0.8.0;

contract SendEther {
    event PaymentReceived(address sender, uint amount);

    function receivePayment() public payable {
        emit PaymentReceived(msg.sender, msg.value);
    }

    function sendPayment(address payable recipient) public payable {
        recipient.transfer(msg.value);
    }
}
</code>
    </pre>




    <h2 class="text-2xl font-semibold mb-2">#5 · Smart Contract Interaction & Inheritance</h2>

    <p class="mb-4">This section explains how smart contracts can interact with each other and how code can be reused through inheritance.</p>

    <ul class="list-disc ml-6 mb-4">
        <li><strong>Contract Interaction:</strong>  Contracts can interact with other contracts by calling their public functions.  This requires having the interface (ABI) and address of the target contract.</li>
        <li><strong>Inheritance:</strong> Inheritance allows creating new contracts (derived contracts) based on existing ones (base contracts). Derived contracts inherit the properties and functions of the base contract and can extend or override them.</li>
    </ul>


    <pre class="bg-gray-200 p-4 rounded-lg overflow-x-auto">
<code class="language-solidity text-sm">
pragma solidity ^0.8.0;


contract BaseContract {
    uint public value;

    function setValue(uint x) public {
        value = x;
    }
}


contract DerivedContract is BaseContract {
    function doubleValue() public {
        value = value * 2;
    }
}
</code>
    </pre>

</body>
</html>

```

This expanded version provides much more detail, code examples, and explanations for each topic.  Remember to install the Tailwind CSS library to get the styling.  You can also replace the placeholder code comments with actual logic as needed.  This robust structure will help you learn and understand Solidity concepts effectively.