```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Contracts</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-4">

    <h1 class="text-3xl font-bold mb-4">Understanding Smart Contracts</h1>

    <p class="mb-4">Smart contracts are self-executing contracts with the terms of the agreement between buyer and seller being directly written into lines of code. The code and the agreements contained therein exist across a distributed, decentralized blockchain network. The code controls the execution, and transactions are trackable and irreversible.</p>


    <h1 class="text-3xl font-bold mb-4">Deep Dive into Smart Contracts</h1>

    <h2 class="text-2xl font-bold mb-2">What are Smart Contracts?</h2>
    <p class="mb-4">Smart contracts, despite their name, are not legal contracts in the traditional sense. They are lines of code that automatically execute predefined actions when certain conditions are met.  Think of them as automated agreements written in computer language instead of legal jargon. They reside on a blockchain, which ensures transparency, security, and immutability.</p>

    <h2 class="text-2xl font-bold mb-2">History of Smart Contracts</h2>
    <p class="mb-4">The concept of smart contracts was first proposed by Nick Szabo, a computer scientist and cryptographer, in the 1990s. He envisioned a digital vending machine where the terms of sale (e.g., price, product delivery) were encoded into the machine's logic. With the advent of blockchain technology, Szabo's vision became a reality. The decentralized and tamper-proof nature of blockchain provides the ideal platform for implementing and enforcing smart contracts.</p>

    <h2 class="text-2xl font-bold mb-2">How Smart Contracts Work</h2>
    <p class="mb-4">Smart contracts operate on a simple "if-then" principle.  When predefined conditions are met, the contract automatically executes the corresponding actions. Hereâ€™s a simplified breakdown:</p>

    <ul class="list-disc pl-6 mb-4">
        <li><strong>Contract Creation:</strong> The contract's terms and conditions are encoded into a computer program.</li>
        <li><strong>Deployment:</strong> The contract is deployed onto a blockchain network.</li>
        <li><strong>Event Trigger:</strong> A real-world event or a predefined condition triggers the contract.</li>
        <li><strong>Execution:</strong> The contract automatically executes the agreed-upon actions, such as transferring funds, releasing digital assets, or registering data.</li>
    </ul>

    <h2 class="text-2xl font-bold mb-2">Uses of Smart Contracts</h2>
    <p class="mb-4">Smart contracts have a wide range of potential applications across various industries:</p>

    <ul class="list-disc pl-6 mb-4">
        <li><strong>Supply Chain Management:</strong> Tracking goods, automating payments, and verifying product authenticity.</li>
        <li><strong>Healthcare:</strong> Securely storing and sharing medical records, managing insurance claims, and streamlining clinical trials.</li>
        <li><strong>Voting Systems:</strong> Ensuring transparency and immutability in elections.</li>
        <li><strong>Digital Identity:</strong> Managing and verifying identities securely and efficiently.</li>
        <li><strong>Decentralized Finance (DeFi):</strong> Creating decentralized lending platforms, automated market makers, and other financial instruments.</li>
        <li><strong>Non-Fungible Tokens (NFTs):</strong> Representing unique digital assets like artwork, collectibles, and in-game items.</li>
    </ul>

    <h2 class="text-2xl font-bold mb-2">Pros and Cons of Smart Contracts</h2>
    <p class="mb-4">Like any technology, smart contracts have their advantages and disadvantages:</p>

    <h3 class="text-xl font-bold mb-2">Pros:</h3>
    <ul class="list-disc pl-6 mb-4">
        <li><strong>Efficiency:</strong> Automate processes and reduce transaction times.</li>
        <li><strong>Transparency:</strong> All contract details are publicly recorded on the blockchain.</li>
        <li><strong>Security:</strong> Cryptographic security ensures that contracts are tamper-proof.</li>
        <li><strong>Cost Savings:</strong> Eliminate intermediaries and reduce administrative costs.</li>
    </ul>

    <h3 class="text-xl font-bold mb-2">Cons:</h3>
    <ul class="list-disc pl-6 mb-4">
        <li><strong>Code Vulnerability:</strong> Bugs in the code can be exploited by attackers.</li>
        <li><strong>Legal Enforceability:</strong> The legal status of smart contracts is still evolving.</li>
        <li><strong>"Real-World" Data Integration:</strong> Connecting smart contracts to real-world data sources can be challenging (the "oracle problem").</li>
    </ul>


    <h2 class="text-2xl font-bold mb-2">Example of a Smart Contract</h2>

    <p class="mb-4">Imagine a simple escrow agreement. A buyer wants to purchase a product from a seller. They use a smart contract to hold the buyer's payment until the seller delivers the product. Once the product is delivered and confirmed, the smart contract automatically releases the payment to the seller.  This eliminates the need for a trusted third party.</p>


    <h2 class="text-2xl font-bold mb-2">Key Components of a Smart Contract</h2>
    <ul class="list-disc pl-6 mb-4">
        <li><strong>Signatories:</strong> The parties involved in the contract.</li>
        <li><strong>Subject:</strong> The asset or service being exchanged.</li>
        <li><strong>Conditions:</strong> The specific criteria that must be met for the contract to execute.</li>
        <li><strong>Code:</strong> The program that defines the contract's logic and actions.</li>
    </ul>

    <h1 class="text-3xl font-bold mb-4">Code Example (Solidity - Ethereum Smart Contract Language)</h1>
    <pre class="bg-gray-800 text-white p-4 rounded-lg overflow-x-auto">
        <code class="language-solidity">
pragma solidity ^0.8.0;

contract SimpleEscrow {

    address payable public buyer;
    address payable public seller;
    uint public price;
    bool public productDelivered;

    constructor(address payable _seller) payable {
        seller = _seller;
        buyer = payable(msg.sender);
        price = msg.value;
        productDelivered = false;
    }

    function confirmDelivery() public {
        require(msg.sender == buyer, "Only the buyer can confirm delivery.");
        require(!productDelivered, "Product has already been delivered.");

        productDelivered = true;
        seller.transfer(price);
    }
}
        </code>
    </pre>


    <h1 class="text-3xl font-bold mb-4">The Future of Smart Contracts</h1>
    <p class="mb-4">Smart contracts are a rapidly evolving technology with the potential to revolutionize how we conduct business and interact with the digital world.  As blockchain technology matures and legal frameworks adapt, we can expect to see even more innovative and impactful applications of smart contracts in the years to come.</p>

</body>
</html>
```


This expanded response provides a significantly more detailed explanation of smart contracts, covering their history, functionality, uses, pros and cons, code examples, and future potential.  It also incorporates the requested HTML structure and Tailwind CSS for styling.  Remember to include the Tailwind CSS CDN link in the `<head>` of your HTML document for the styling to take effect.  Furthermore, to highlight the Solidity code example effectively, consider adding a syntax highlighter library.  The provided code is a simplified example; real-world smart contracts can be much more complex.